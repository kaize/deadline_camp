class MemberDecorator < Draper::Base
  decorates :member

  def full_name
    [ first_name, last_name ].join(' ')
  end

  def s_jobs
    out = jobs.map do |job|
      [job.company, job.started_at, job.finished_at, job.job, job.responsibility, job.achievements].join(', ')
    end
    out.join("; ")
  end

  def s_preferences
    s_description(preferences)
  end
  def s_additional_educations
    s_description(additional_educations)
  end
  def s_achievements
    s_description(achievements)
  end
  def s_others
    s_description(others)
  end

  def s_langs
    out = langs.map do |lng|
      [ lng.language, lng.level ].join(', ')
    end
    out.join('; ')
  end

  def s_skill_databases
    s_skills(skill_databases)
  end
  def s_skill_ides
    s_skills(skill_ides)
  end
  def s_skill_operation_systems
    s_skills(skill_operation_systems)
  end
  def s_skill_program_langs
    s_skills(skill_program_langs)
  end

  def s_skill_others
    out = skill_others.map do |s|
      [s.name, s.duration, s.level, s.member_id, s.type, s.description].join(', ')
    end
    out.join('; ')
  end

  private

    def s_skills(skills)
      out = skills.map do |s|
        [s.dict, s.duration, s.level, s.member_id, s.type, s.description].join(', ')
      end
      out.join('; ')
    end

    def s_description(association)
      association.map(&:description).join('; ')
    end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
